{"version":3,"sources":["config.js","DataTable.js","App.js","reportWebVitals.js","index.js"],"names":["CONFIG","API_KEY","DataTable","header","data","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","map","head","TableCell","name","key","TableBody","row","idx1","idx2","axios","require","default","App","useState","inputs","setInputs","tableData","setTableData","className","Button","variant","color","style","marginLeft","onClick","latlngs","trim","split","input","l","reverse","join","promises","forEach","latlng","promise","get","push","Promise","all","then","values","processed_results","Map","value","lng_lat","config","url","slice","results","length","result","set","formatted_address","display_data","address","catch","e","window","alert","disabled","TextField","label","type","onChange","target","multiline","rows","placeholder","download","Date","toLocaleString","csv","console","log","href","encodeURI","getDownloadCSVLinkProps","textDecoration","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.96c780fa.chunk.js","sourcesContent":["const CONFIG = {\n  API_KEY: \"AIzaSyBGZ_POOVCGhxFo1olG8gBQKL6zYJNmVFc\",\n};\n\nexport default CONFIG;\n","import React from \"react\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\n\nconst DataTable = ({ header = [], data = [] }) => {\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            {header.map((head) => (\n              <TableCell key={`head_${head.key}`}>{head.name}</TableCell>\n            ))}\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {data.map((row, idx1) => (\n            <TableRow key={idx1}>\n              {header.map((head, idx2) => (\n                <TableCell key={idx2}>{row[head.key]}</TableCell>\n              ))}\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default DataTable;\n","import \"./App.css\";\nimport { Button, TextField } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport CONFIG from \"./config\";\nimport DataTable from \"./DataTable\";\nconst axios = require(\"axios\").default;\n\nfunction App() {\n  const [inputs, setInputs] = useState(\"\");\n  const [tableData, setTableData] = useState(null);\n\n  const handleDecode = () => {\n    const latlngs = inputs\n      .trim()\n      .split(\"\\n\")\n      .map((input) =>\n        input\n          .trim()\n          .split(\" \")\n          .map((l) => l.trim())\n          .reverse()\n          .join(\",\")\n      );\n\n    let promises = [];\n    latlngs.forEach((latlng) => {\n      const promise = axios.get(\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${latlng}&language=zh-TW&result_type=street_address&location_type=ROOFTOP&key=${CONFIG.API_KEY}`\n      );\n      promises.push(promise);\n    });\n\n    Promise.all(promises)\n      .then((values) => {\n        let processed_results = new Map();\n        values.forEach((value) => {\n          const lng_lat = value.config.url\n            .split(\"?\")[1]\n            .split(\"&\")[0]\n            .slice(7)\n            .split(\",\")\n            .reverse()\n            .join(\",\");\n          if (value && value.data && value.data.results && value.data.results.length) {\n            const result = value.data.results[0];\n            processed_results.set(lng_lat, result.formatted_address);\n          } else {\n            processed_results.set(lng_lat, \"-- error --\");\n          }\n        });\n\n        const display_data = inputs\n          .trim()\n          .split(\"\\n\")\n          .map((input) => {\n            const key = input\n              .trim()\n              .split(\" \")\n              .map((l) => l.trim())\n              .join(\",\");\n\n            return {\n              latlng: key.split(\",\").join(\" \"),\n              address: processed_results.get(`${key}`),\n            };\n          });\n\n        setTableData(display_data);\n      })\n      .catch((e) => {\n        window.alert(e);\n        setTableData(null);\n      });\n  };\n\n  const handleClear = () => {\n    setInputs(\"\");\n    setTableData(null);\n  };\n\n  // const getDownloadLinkProps = () => {\n  //   if (tableData) {\n  //     const data = { data: tableData };\n  //     const download = `ADDRESSES_${new Date().toLocaleString()}.json`;\n  //     const downloadData = JSON.stringify(data || {}, 0, 2);\n  //     const href = \"data:application/json;charset=utf-8,\" + encodeURIComponent(downloadData);\n\n  //     return {\n  //       href,\n  //       download,\n  //     };\n  //   }\n\n  //   return {\n  //     href: \"\",\n  //   };\n  // };\n\n  const getDownloadCSVLinkProps = () => {\n    if (tableData) {\n      const download = `ADDRESSES_${new Date().toLocaleString()}.csv`;\n      let csv = \"經,緯,地址\\n\"\n      tableData.forEach(data => {\n        const row = `${data.latlng.trim().split(\" \").join(\",\")},${data.address}\\n`;\n        console.log(row)\n        csv += row;\n      })\n\n      const href = 'data:text/csv;charset=utf-8,' + encodeURI(csv);\n\n      return {\n        href,\n        download,\n      };\n    }\n\n    return {\n      href: \"\",\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>經緯度地址轉換器</h1>\n\n        <section className=\"action__bar\">\n          <p>輸入經緯度時，經在前，緯在後，中間請空格</p>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            style={{ marginLeft: \"20px\" }}\n            onClick={handleDecode}\n            disabled={!inputs}>\n            轉換\n          </Button>{\" \"}\n          |\n          <Button\n            variant=\"outlined\"\n            color=\"primary\"\n            style={{ marginLeft: \"10px\" }}\n            onClick={handleClear}>\n            清除\n          </Button>\n        </section>\n\n        <main className=\"transformer\">\n          <TextField\n            label=\"輸入經緯度，一筆一行\"\n            type=\"text\"\n            variant=\"outlined\"\n            value={inputs}\n            onChange={(e) => setInputs(e.target.value)}\n            multiline={true}\n            rows={10}\n            placeholder=\"121.721183 25.120552\"\n          />\n\n          <h3>\n            轉換結果\n            <a {...getDownloadCSVLinkProps()} style={{ textDecoration: \"none\" }}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                style={{ marginLeft: \"20px\" }}\n                disabled={!tableData}>\n                下載 CSV\n              </Button>\n            </a>\n          </h3>\n          {tableData ? (\n            <DataTable\n              header={[\n                { key: \"latlng\", name: \"經緯度\" },\n                { key: \"address\", name: \"地址\" },\n              ]}\n              data={tableData}\n            />\n          ) : (\n            <p>-- no result --</p>\n          )}\n        </main>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}